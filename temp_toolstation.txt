        server.middlewares.use('/api/toolstation', async (req, res) => {
          try {
            // Add CORS headers
            res.setHeader('Access-Control-Allow-Origin', '*')
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type')
            
            if (req.method === 'OPTIONS') {
              res.statusCode = 200
              res.end()
              return
            }
            
            if (req.method !== 'GET') {
              res.statusCode = 405
              res.end('Method Not Allowed')
              return
            }

            const url = new URL(req.url || '', 'http://localhost')
            const termRaw = url.searchParams.get('term') || ''
            const term = termRaw
              .replace(/[^\p{L}\p{N}\s\-+]/gu, ' ')
              .trim()
              .slice(0, 64)
            if (!term) {
              res.statusCode = 400
              res.end('Missing term')
              return
            }

            console.log('Toolstation dev search for:', term)
            const controller = new AbortController()
            const timeout = setTimeout(() => controller.abort(), 20000)
            
            try {
              // Helper functions from Netlify function
              const getSetCookies = (headers: Headers): string[] => {
                const anyH = headers as any
                try {
                  if (typeof anyH.raw === 'function') {
                    const raw = anyH.raw()
                    const list = raw && raw['set-cookie']
                    if (Array.isArray(list)) return list
                  }
                  if (typeof anyH.getSetCookie === 'function') {
                    return (anyH.getSetCookie() as string[]) || []
                  }
                } catch {}
                const single = headers.get('set-cookie')
                return single ? [single] : []
              }

              const mergeCookies = (existing: string | null, setCookies: string[]): string => {
                const jar = new Map<string, string>()
                if (existing) existing.split('; ').forEach(p => { const [k, v] = p.split('='); if (k) jar.set(k, v ?? '') })
                setCookies.forEach(sc => { const [nameVal] = sc.split(';'); const [k, v] = nameVal.split('='); if (k) jar.set(k, v ?? '') })
                return Array.from(jar.entries()).map(([k, v]) => ${k}=).join('; ')
              }

              // Step 1: Get homepage to establish session
              console.log('Step 1: Getting homepage...')
              const homeResp = await fetch('https://www.toolstation.com/', {
                signal: controller.signal,
                headers: {
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                  'Accept-Language': 'en-GB,en;q=0.9',
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
                },
              })
              
              let cookies = getSetCookies(homeResp.headers)
              let cookieHeader = mergeCookies(null, cookies)
              let token: string | null = null
              cookies.forEach(sc => { const m = sc.match(/ecomApiAccessToken=([^;]+)/); if (m) token = m[1] })
              console.log('Homepage token found:', !!token)

              // Step 2: Get search page to refresh token if needed
              if (!token) {
                console.log('Step 2: Getting search page for token...')
                const searchResp = await fetch(https://www.toolstation.com/search?q=, {
                  signal: controller.signal,
                  headers: {
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'Accept-Language': 'en-GB,en;q=0.9',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
                    ...(cookieHeader ? { 'Cookie': cookieHeader } : {}),
                  },
                })
                const more = getSetCookies(searchResp.headers)
                cookieHeader = mergeCookies(cookieHeader, more)
                more.forEach(sc => { const m = sc.match(/ecomApiAccessToken=([^;]+)/); if (m) token = m[1] })
                console.log('Search page token found:', !!token)
              }

              if (!token) {
                console.log('No token found, falling back to HTML parsing')
                // Fallback to HTML parsing if no token
                const searchResp = await fetch(https://www.toolstation.com/search?q=, {
                  signal: controller.signal,
                  headers: {
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'Accept-Language': 'en-GB,en;q=0.9',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
                    ...(cookieHeader ? { 'Cookie': cookieHeader } : {}),
                  },
                })
                
                const bodyObj = { response: { docs: [] } }
                res.setHeader('Content-Type', 'application/json')
                res.end(JSON.stringify(bodyObj))
                return
              }

              // Step 3: Call the API with proper authentication
              console.log('Step 3: Calling Toolstation API...')
              const apiUrl = new URL('https://www.toolstation.com/api/search/crs')
              apiUrl.searchParams.set('request_id', String(Date.now()))
              apiUrl.searchParams.set('domain_key', 'toolstation')
              apiUrl.searchParams.set('view_id', 'gb')
              apiUrl.searchParams.set('request_type', 'search')
              apiUrl.searchParams.set('stats_field', 'price,channel')
              apiUrl.searchParams.set('f.category.facet.prefix', '/root,Home/')
              apiUrl.searchParams.set('q', term)
              apiUrl.searchParams.set('rows', '24')
              apiUrl.searchParams.set('start', '0')
              apiUrl.searchParams.set('groupby', 'variant_group')
              apiUrl.searchParams.set('fl', 'pid,slug,numberofreviews,title,brand,sale_price,promotion,thumb_image,sku_thumb_images,sku_swatch_images,sku_color_group,url,priceRange,description,formattedPrices,prices,ts_reviews,assettr,name_type,name_qty,variations,price,samedaydelivery,quantitymaximum,quantityminimum,quantitylabel,channel,group_title,sku_count,sku_group_price_range,sku_group_price_range_ex_vat,campaign')
              apiUrl.searchParams.set('url', 'https://www.toolstation.com')
              apiUrl.searchParams.set('ref_url', 'https://www.google.com/')

              const apiResp = await fetch(apiUrl.toString(), {
                signal: controller.signal,
                headers: {
                  'Accept': 'application/json',
                  'Accept-Language': 'en-GB,en;q=0.9',
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
                  'Referer': https://www.toolstation.com/search?q=,
                  'Authorization': Bearer ,
                  ...(cookieHeader ? { 'Cookie': cookieHeader } : {}),
                },
              })

              if (apiResp.ok) {
                console.log('API call successful')
                const jsonText = await apiResp.text()
                res.setHeader('Content-Type', 'application/json')
                res.end(jsonText)
                return
              } else {
                console.log('API call failed:', apiResp.status)
                const bodyObj = { response: { docs: [] } }
                res.setHeader('Content-Type', 'application/json')
                res.end(JSON.stringify(bodyObj))
                return
              }
              
            } finally {
              clearTimeout(timeout)
            }
          } catch (err) {
            console.error('Toolstation dev error:', err)
            res.statusCode = 500
            res.setHeader('Content-Type', 'application/json')
            res.end(JSON.stringify({ response: { docs: [] } }))
          }
        })
